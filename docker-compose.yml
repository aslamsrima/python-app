version: '3'
x-airflow-common:
  &airflow-common
  # build: .
  image: apache/airflow:latest
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
  # user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on:
    airflow-db:
      condition: service_healthy

services:
  # airflow-db:
  #   image: postgres:alpine
  #   environment:
  #     POSTGRES_USER: airflow
  #     POSTGRES_PASSWORD: airflow
  #     POSTGRES_DB: airflow
  #   volumes:
  #     - postgres-db-volume:/var/lib/postgresql/airflow_data
  #   ports:
  #     - :5432
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "airflow"]
  #     interval: 5s
  #     retries: 5
  #   restart: always

  topics_db:
    image: postgres:alpine
    environment:
      POSTGRES_USER: limoo
      POSTGRES_PASSWORD: limoo
      POSTGRES_DB: topics
    volumes:
      - postgres-db-volume:/var/lib/postgresql/topics_data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "limoo"]
      interval: 5s
      retries: 5
    restart: always

  # airflow-webserver:
  #   <<: *airflow-common
  #   command: webserver
  #   ports:
  #     - 8080:8080
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #   restart: always

  # airflow-scheduler:
  #   <<: *airflow-common
  #   command: scheduler
  #   restart: always

  # airflow-init:
  #   <<: *airflow-common
  #   command: version
  #   environment:
  #     <<: *airflow-common-env
  #     _AIRFLOW_DB_UPGRADE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-user}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-user}

volumes:
  postgres-db-volume: {}